[tool.ruff]

line-length = 90
target-version = "py312"
preview = true

[tool.ruff.format]
line-ending = "lf"


[tool.ruff.lint]
select = [
    "A", "ANN", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "ERA", "F", "FA", "FURB", "G", "I", "INP", "ISC", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "YTT"
]

ignore = [
    "ANN202", # implied return fine sometimes
    "ANN204",  # special method return types
    "ANN401",  # Any is the correct type in some cases
    "ASYNC116", # Long sleeps are fine
    "B901", # I'm aware of how generators as coroutines work
    "C90",  # mccabe complexity memes
    "COM812", # ruff format suggested
    "D", # docs, non public doc
    "D105", # documenting magic methods is often dumb.
    "E501", # ruff format suggested
    "FBT", # Doesn't play nice with discord.py and discord's params
    "FBT003", # Wrong end to enforce this on.
    "G002",  # erroneous issue with %-logging when logging can be confiured for % logging
    "ISC001", # ruff format suggested
    "PLC0105",  # no, I don't like co naming style for typevars
    "PLC0415", # ruff gets this wrong, import needs to be not at top of file in some cases
    "PLR0904",  # too many methods
    "PLR0912", # too many branches
    "PLR0913", # number of function arguments
    "PLR0915",  # too many statements.... in an async entrypoint handling graceful shutdown...
    "PLR0917",  # too many positional arguments
    "PLR2004",  # Magic value comparison, may remove later
    "RUF001",  # ambiguous characters not something I want to enforce here.
    "RUF029",  # no, don't try andd tell me I'm wrong for async def when something is for an interface.
    "S101",  # use of assert here is a known quantity, blame typing memes
    "S311",  # Yes, I know that standard pseudo-random generators are not suitable for cryptographic purposes
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "TC001", # I prefer to avoid if TYPE_CHECKING
    "TC002", # I prefer to avoid if TYPE_CHECKING
    "TC003", # I prefer to avoid if TYPE_CHECKING
    "UP007", # "Use | For Union" doesn't account for typevar tuple unpacking.
    "UP031", # No, I like % formatting more for some things...
]
unfixable = [
    "E501",  # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."
"typing_extensions.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."


[tool.pyright]
include = ["unit_aware.py"]
typeCheckingMode = "strict"
pythonVersion = "3.12"
pythonPlatform = "All"
reportCallInDefaultInitializer = "warning"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"